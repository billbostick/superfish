<?php
// $Id: superfish.module,v 1.16.2.16 2008/02/09 17:36:20 add1sun Exp $
/*
  By RoopleTheme
  jQuery drop-down menus with animation and UI enhancments.
 */

/**
 * Implementation of hook_help().
 */
function superfish_help($section) {
  switch ($section) {
    case 'admin/settings/modules#description':
      $output = t('Drop-down menus with javascript enhancments.');
      break;
    case 'admin/settings/superfish':
      $output = t('<p>This module uses the superfish jquery plugin in order to provide a javascript-enabled drop-down menu. Additional features can be provided by the easing, hoverIntent, supersubs, and bgiframe plugins. Configure the menu block at !link</p>', array('!link' => l('admin/build/block', 'admin/build/block')));
      break;
  }
  return $output;
}

/**
 * Implementation of hook_form_alter().
 */
function superfish_form_alter($form_id, &$form) {
  switch ($form_id) {
    case 'system_theme_settings':

      // This is a global setting, so only insert the field 
      // on the global settings page.
      if (arg(4)) {
        return;
      }

      // Have to add a custom submit handler since this form doesn't use 
      // the standard system submit handler.
      $form['#submit'] += array('superfish_system_theme_settings_submit' => array());

      // Add global theme setting for a custom CSS file.
      $form['superfish_custom_css'] = array(
        '#type' => 'textfield',
        '#title' => t('Path to custom Superfish Menus CSS file'),
        '#description' => t('To override the default Superfish Menus CSS layout, enter the path to your custom CSS file.  It should be a relative path from the root of your Drupal install (e.g. sites/all/themes/example/mymenu.css).'),
        '#default_value' => variable_get('superfish_custom_css', ''),
        // Field appears below submit buttons without this -- yucky.
        '#weight' => 0,
      );
      break;
  }
}

/**
 * Records the superfish menu custom CSS file per theme.
 */
function superfish_system_theme_settings_submit($form_id, $form_values) {
  variable_set('superfish_custom_css', $form_values['superfish_custom_css']);
}

function _superfish_getjsinit() {

  $delay = variable_get('superfish_delay',  800);

	if (isset($_COOKIE["superfishtype"])) {
		$navtype = intval($_COOKIE["superfishtype"]);
	} 
	else {
		$navtype = variable_get('superfish_navtype',  0);
	}

  if (isset($_COOKIE["superfishspeed"])) {
    $speed = intval($_COOKIE["superfishspeed"]);
  } 
  else {
    $speed = variable_get('superfish_speed',  1);
  }
  $speed_choices = array('slow', 'normal', 'fast');
  $speed_string = $speed_choices[$speed];

  if (isset($_COOKIE["superfishease"])) {
    $easing = intval($_COOKIE["superfishease"]);
  } 
  else {
    $easing = variable_get('superfish_easing',  0);
  }
  $easing_choices = array('', 'jswing', 'easeOutQuad', 'easeOutCubic', 'easeOutQuart', 'easeOutQuint', 'easeOutSine', 'easeOutExpo', 'easeOutCirc', 'easeOutBounce', 'easeOutBack', 'easeOutElastic');
  $easing_string = $easing_choices[$easing];
  if ($easing_string != '') {
    $easing_js = "jQuery.easing.def = '". $easing_string ."';";
  } 
  else {
    $easing_js = '';
  }

  if (isset($_COOKIE["superfishfx"])) {
    $animation = intval($_COOKIE["superfishfx"]);
  } 
  else {
    $animation = variable_get('superfish_animation',  0);
  }
  $animation_choices = array("opacity:'show'", "height:'show'", "width:'show'", "height:'show',width:'show'", "opacity:'show',height:'show'", "opacity:'show',width:'show'", "opacity:'show',height:'show',width:'show'");
  $animation_string = $animation_choices[$animation];

  if (variable_get('superfish_dropshadow', 0)) {
    $dropshadow = 'true';
  }
  else {
    $dropshadow = 'false';
  }
  
  if (variable_get('superfish_autoarrows', 0)) {
    $autoarrows = 'true';
  }
  else {
    $autoarrows = 'false';
  }
  
  if (variable_get('superfish_hoverintent', 1)) {
    $disablehoverintent = 'false';
  }
  else {
    $disablehoverintent = 'true';
  }
  
  if (variable_get('superfish_bgiframe', 1)) {
    $bgiframe = ".find('ul').bgIframe({opacity:false})";
  }
  else {
    $bgiframe = '';
  }
  
  if ((variable_get('superfish_supersubs', 1)) && $navtype == 0) {
    $supersubs = ".supersubs({minWidth: 12, maxWidth: 30, extraWidth: 1})";
  }
  else {
    $supersubs = '';
  }
  
  return ($easing_js ."jQuery(function(){
        jQuery('ul.sf-menu')". $supersubs .".superfish({delay: ". $delay .", animation: {". $animation_string ."}, speed: '".  $speed_string ."',
              autoArrows: ". $autoarrows .", dropShadows: ". $dropshadow .", disableHI: ". $disablehoverintent .", pathClass:  'active'})". $bgiframe .";
    });  ");
}

/**
 * Implemention of hook_menu().
 */
function superfish_menu($may_cache) {
  if (!$may_cache) {
    drupal_add_css(drupal_get_path('module', 'superfish') .'/css/superfish.css');

    if (isset($_COOKIE["superfishtype"])) {
      $navtype = intval($_COOKIE["superfishtype"]);
    } 
    else {
      $navtype = variable_get('superfish_navtype',  0);
    }
    if ($navtype == 1) {
      drupal_add_css(drupal_get_path('module', 'superfish') .'/css/superfish-navbar.css');
    }

    if (variable_get('superfish_hoverintent', 1)) {
      drupal_add_js(drupal_get_path('module', 'superfish') .'/js/hoverIntent.js');
    }

    if (variable_get('superfish_bgiframe', 1)) {
      drupal_add_js(drupal_get_path('module', 'superfish') .'/js/jquery.bgiframe.min.js');
    }

    drupal_add_js(drupal_get_path('module', 'superfish') .'/js/superfish.js');

    if ((variable_get('superfish_supersubs', 1)) && $navtype == 0) {
      drupal_add_js(drupal_get_path('module', 'superfish') .'/js/supersubs.js');
    }
  
  if (!variable_get('superfish_dropshadow', 0)) {
    drupal_set_html_head('<style type="text/css">.block ul.sf-menu ul { padding: 0 0 0 0; }</style>');
  }

//    if (variable_get('superfish_easing', 0)) {
      drupal_add_js(drupal_get_path('module', 'superfish') .'/js/jquery.easing.1.3.js');
//    }

    drupal_add_js(_superfish_getjsinit(), "inline");
  }
  else {
    $items[] = array(
      'path' => 'admin/settings/superfish',
      'title' => t('Superfish Menus'),
      'description' => t('Configure Superfish Menus.'),
      'callback' => 'drupal_get_form',
      'callback arguments' => array('superfish_admin_settings'),
      'access' => user_access('administer site configuration'),
      'type' => MENU_NORMAL_ITEM,
    );
  }

  return $items;
}


/**
 * Settings form as implemented by hook_menu
 */
function superfish_admin_settings() {

  $form['superfish_number'] = array(
    '#type' => 'select',
    '#title' => t('Number of Superfish Menus'),
    '#description' => t('The total number of independent Superfish Menus (blocks) you want.'),
    '#default_value' => variable_get('superfish_number', '2'),
    '#options' => drupal_map_assoc(array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10)),
  );

  $navtype = variable_get('superfish_navtype',  0);
  $animation = variable_get('superfish_animation',  0);
  $speed = variable_get('superfish_speed',  1);
  $easing = variable_get('superfish_easing',  0);

  $form['superfish_delay'] = array(
    '#type' => 'select',
    '#title' => t('Mouseout Delay, in Milliseconds'),
    '#description' => t('Mouseout Delay, in Milliseconds.'),
    '#default_value' => variable_get('superfish_delay', 800),
    '#options' => drupal_map_assoc(array(0, 100, 200, 300, 400, 500, 600, 700, 800, 900, 1000)),
  );

  $form['superfish_navtype'] = array(
    '#type' => 'select',
    '#title' => t('Superfish Menu Type'),
    '#description' => t("Superfish Menu Type."),
    '#options' => array('Standard', 'Navbar', 'Vertical'),
    '#default_value' => $navtype,
  );

  $form['superfish_animation'] = array(
    '#type' => 'select',
    '#title' => t('Animation Method'),
    '#description' => t("Animation Method."),
    '#options' => array('Fade In', 'Slide Down', 'Slide Right', 'Slide Both', 'Fade In Slide Down', 'Fade In Slide Right', 'Fade In Slide Both'),
    '#default_value' => $animation,
  );

  $form['superfish_speed'] = array(
    '#type' => 'select',
    '#title' => t('Animation Speed'),
    '#description' => t("Animation Speed."),
    '#options' => array('slow', 'normal', 'fast'),
    '#default_value' => $speed,
  );

  $form['superfish_easing'] = array(
    '#type' => 'select',
    '#title' => t('Easing Method'),
    '#description' => t("Easing Method."),
    '#options' => array('linear', 'swing', 'easeOutQuad', 'easeOutCubic', 'easeOutQuart', 'easeOutQuint', 'easeOutSine', 'easeOutExpo', 'easeOutCirc', 'easeOutBounce', 'easeOutBack', 'easeOutElastic'),
    '#default_value' => $easing,
  );

  $form['superfish_dropshadow'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable Drop Shadow'),
    '#default_value' => variable_get('superfish_dropshadow', 0),
  );

  $form['superfish_autoarrows'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable Auto Arrows'),
    '#default_value' => variable_get('superfish_autoarrows', 0),
  );

  $form['superfish_hoverintent'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable HoverIntent Plugin'),
    '#default_value' => variable_get('superfish_hoverintent', 1),
  );

  $form['superfish_supersubs'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable Supersubs Plugin'),
    '#default_value' => variable_get('superfish_supersubs', 1),
  );

  $form['superfish_bgiframe'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable Bglframe Plugin'),
    '#default_value' => variable_get('superfish_bgiframe', 1),
  );

  return system_settings_form($form);
}

/**
 * Implementation of hook_block().
 */
function superfish_block($op = 'list', $delta = 0, $edit = array()) {
  global $user;

  switch ($op) {
    case 'list':
      for ($i=1; $i <= variable_get('superfish_number', '2'); $i++) {
        $blocks[$i]['info'] = variable_get('superfish_name_'. $i, 'Superfish Menu '. $i) .' (Superfish Menu)';
      }
      return $blocks;
    break;

    case 'configure':
      $form['superfish_name_'. $delta] = array(
        '#type' => 'textfield',
        '#title' => t('Menu Name'),
        '#default_value' => variable_get('superfish_name_'. $delta, 'Superfish Menu '. $delta),
      );
      $form['superfish_menu_'. $delta] = array(
        '#type' => 'select',
        '#title' => t('Source Menu Tree'),
        '#description' => t('The menu tree from which to show a superfish menu.'),
        '#default_value' => variable_get('superfish_menu_'. $delta, '1'),
        '#options' => menu_parent_options(0, 0),
      );
      $form['superfish_type_'. $delta] = array(
        '#type' => 'select',
        '#title' => t('Menu Style'),
        '#description' => t('right: menu items are listed on top of each other and expand to the right') .'<br />'. t('left: menu items are listed on top of each other and expand to the left') .'<br />'. t('down: menu items are listed side by side and expand down'),
        '#default_value' => variable_get('superfish_type_'. $delta, 'right'),
        '#options' => drupal_map_assoc(array('right', 'left', 'down')),
      );
      return $form;
    break;

    case 'save':
      variable_set('superfish_name_'. $delta, $edit['superfish_name_'. $delta]);
      variable_set('superfish_menu_'. $delta, $edit['superfish_menu_'. $delta]);
      variable_set('superfish_type_'. $delta, $edit['superfish_type_'. $delta]);
    break;

    case 'view':
      // Build the superfish menu for the block.
      $pid = variable_get('superfish_menu_'. $delta, '1');
      $direction = variable_get('superfish_type_'. $delta, 'right');
      if ($output = theme('superfish', $delta, $pid, $direction)) {
        $block['content'] = $output['content'];
        if (variable_get('superfish_type_'. $delta, 'right') == 'down') {
          $class = 'superfish-menu-hide-title';
        }
        else {
          $class = 'superfish-menu-show-title';
        }
        // If we're building the navigation block
        // use the same block title logic as menu module.
        if ($output['subject'] == t('Navigation') && $user->uid) {
          $subject = $user->name;
        }
        else {
          $subject = $output['subject'];
        }
        $block['subject'] = '<span class="'. $class .'">'. check_plain($subject) .'</span>';
      }
      else {
        $block['content'] = false;
      }

      return $block;
    break;
  }
}

/**
 * Builds the inner portion of a superfish menu.
 *
 * @param $pid
 *   The parent menu ID from which to build the items.
 * @param $menu
 *   Optional. A custom menu array to use for theming --
 *   it should have the same structure as that returned by menu_get_menu().
 * @return
 *   An HTML string of properly nested superfish menu lists.
 */
function theme_superfish_tree($pid = 1, $menu = NULL) {
  $menu = isset($menu) ? $menu : menu_get_menu();
  $output['content'] = '';

  $output['subject'] = $menu['items'][$pid]['title'];

  if ($menu['visible'][$pid]['children']) {
    // Build class name based on menu path 
    // e.g. to give each menu item individual style.
    foreach ($menu['visible'][$pid]['children'] as $mid) {  
      // Strip funny symbols
      $clean_path = str_replace(array('http://', '<', '>', '&', '=', '?', ':'), '', $menu['items'][$mid]['path']);
      // Convert slashes to dashes
      $clean_path = str_replace('/', '-', $clean_path);
      $path_class = 'menu-path-'. $clean_path;
      if (count($menu['visible'][$mid]['children']) > 0) {
        $output['content'] .= '<li id="menu-'. $mid .'" class="menuparent '. $path_class .'">'. menu_item_link($mid);
        $output['content'] .= '<ul>';
        $tmp = theme('superfish_tree', $mid);
        $output['content'] .= $tmp['content'];
        $output['content'] .= "</ul>\n";
        $output['content'] .= "</li>\n";
      }
      else {
        $output['content'] .= '<li id="menu-'. $mid .'" class="'. $path_class .'">'. menu_item_link($mid) .'</li>'."\n";
      }
    }
  }
  return $output;
}

/**
 * General theming function to allow any menu tree to be themed 
 * as a superfish menu.
 *
 * @param $id
 *   The superfish menu ID.
 * @param $pid
 *   The parent menu ID from which to build the superfish menu
 * @param $direction
 *   Optional. The direction the menu expands. Default is 'right'.
 * @param $menu
 *   Optional. A custom menu array to use for theming --
 *   it should have the same structure
 *   as that returned by menu_get_menu(). Default is the standard menu tree.
 * @return
 *   An HTML string of superfish menu links.
 */
function theme_superfish($id, $pid, $direction = 'right', $menu = NULL) {
  $output = array();

  $sfclass = 'sf-menu ';
  if (isset($_COOKIE["superfishtype"])) {
    $navtype = intval($_COOKIE["superfishtype"]);
  } 
  else {
    $navtype = variable_get('superfish_navtype',  0);
  }

  if ($navtype == 1) {
    $sfclass .= ' sf-navbar ';
  }
  $sfclass .= 'superfish-menu superfish-menu-'. $direction;

  if ($menu_tree = theme('superfish_tree', $pid, $menu)) {
    if ($menu_tree['content']) {
      $output['content'] = '<ul class="'. $sfclass .'" id="superfish-menu-'. $id .'">'. $menu_tree['content'] .'</ul>'."\n";
      $output['subject'] = $menu_tree['subject'];
    }
  }
  return $output;
}

/**
 * Theme primary links as Superfish Menus
 *
 * @param $direction
 *   Optional. The direction the menu expands. Default is 'down'.
 * @param $menu
 *   Optional. A custom menu array to use for theming --
 *   it should have the same structure
 *   as that returned by menu_get_menu(). Default is the standard menu tree.
 * @return
 *   An HTML string of superfish menu primary links.
 */
function theme_superfish_primary_links($direction = 'down', $menu = NULL) {
  $pid = variable_get('menu_primary_menu', 0);
  $output = theme('superfish', 'primary', $pid, $direction, $menu);
  return $output['content'];
}
